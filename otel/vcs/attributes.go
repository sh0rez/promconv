package vcs

// The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system
type AttrChangeId string // vcs.change.id

func (AttrChangeId) Development()    {}
func (AttrChangeId) Recommended()    {}
func (AttrChangeId) Key() string     { return "vcs_change_id" }
func (a AttrChangeId) Value() string { return string(a) }

// The state of the change (pull request/merge request/changelist)
type AttrChangeState string // vcs.change.state

func (AttrChangeState) Development()    {}
func (AttrChangeState) Recommended()    {}
func (AttrChangeState) Key() string     { return "vcs_change_state" }
func (a AttrChangeState) Value() string { return string(a) }

const ChangeStateOpen AttrChangeState = "open"
const ChangeStateWip AttrChangeState = "wip"
const ChangeStateClosed AttrChangeState = "closed"
const ChangeStateMerged AttrChangeState = "merged"

// The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary
type AttrChangeTitle string // vcs.change.title

func (AttrChangeTitle) Development()    {}
func (AttrChangeTitle) Recommended()    {}
func (AttrChangeTitle) Key() string     { return "vcs_change_title" }
func (a AttrChangeTitle) Value() string { return string(a) }

// The type of line change being measured on a branch or change
type AttrLineChangeType string // vcs.line_change.type

func (AttrLineChangeType) Development()    {}
func (AttrLineChangeType) Recommended()    {}
func (AttrLineChangeType) Key() string     { return "vcs_line_change_type" }
func (a AttrLineChangeType) Value() string { return string(a) }

const LineChangeTypeAdded AttrLineChangeType = "added"
const LineChangeTypeRemoved AttrLineChangeType = "removed"

// The group owner within the version control system
type AttrOwnerName string // vcs.owner.name

func (AttrOwnerName) Development()    {}
func (AttrOwnerName) Recommended()    {}
func (AttrOwnerName) Key() string     { return "vcs_owner_name" }
func (a AttrOwnerName) Value() string { return string(a) }

// The name of the version control system provider
type AttrProviderName string // vcs.provider.name

func (AttrProviderName) Development()    {}
func (AttrProviderName) Recommended()    {}
func (AttrProviderName) Key() string     { return "vcs_provider_name" }
func (a AttrProviderName) Value() string { return string(a) }

const ProviderNameGithub AttrProviderName = "github"
const ProviderNameGitlab AttrProviderName = "gitlab"
const ProviderNameGittea AttrProviderName = "gittea"
const ProviderNameGitea AttrProviderName = "gitea"
const ProviderNameBitbucket AttrProviderName = "bitbucket"

// The name of the [reference] such as **branch** or **tag** in the repository.
//
// `base` refers to the starting point of a change. For example, `main`
// would be the base reference of type branch if you've created a new
// reference of type branch from it and created new commits
//
// [reference]: https://git-scm.com/docs/gitglossary#def_ref
type AttrRefBaseName string // vcs.ref.base.name

func (AttrRefBaseName) Development()    {}
func (AttrRefBaseName) Recommended()    {}
func (AttrRefBaseName) Key() string     { return "vcs_ref_base_name" }
func (a AttrRefBaseName) Value() string { return string(a) }

// The revision, literally [revised version], The revision most often refers to a commit object in Git, or a revision number in SVN.
//
// `base` refers to the starting point of a change. For example, `main`
// would be the base reference of type branch if you've created a new
// reference of type branch from it and created new commits. The
// revision can be a full [hash value (see
// glossary)],
// of the recorded change to a ref within a repository pointing to a
// commit [commit] object. It does
// not necessarily have to be a hash; it can simply define a [revision
// number]
// which is an integer that is monotonically increasing. In cases where
// it is identical to the `ref.base.name`, it SHOULD still be included.
// It is up to the implementer to decide which value to set as the
// revision based on the VCS system and situational context
//
// [revised version]: https://www.merriam-webster.com/dictionary/revision
// [hash value (see
// glossary)]: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf
// [commit]: https://git-scm.com/docs/git-commit
// [revision
// number]: https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html
type AttrRefBaseRevision string // vcs.ref.base.revision

func (AttrRefBaseRevision) Development()    {}
func (AttrRefBaseRevision) Recommended()    {}
func (AttrRefBaseRevision) Key() string     { return "vcs_ref_base_revision" }
func (a AttrRefBaseRevision) Value() string { return string(a) }

// The type of the [reference] in the repository.
//
// `base` refers to the starting point of a change. For example, `main`
// would be the base reference of type branch if you've created a new
// reference of type branch from it and created new commits
//
// [reference]: https://git-scm.com/docs/gitglossary#def_ref
type AttrRefBaseType string // vcs.ref.base.type

func (AttrRefBaseType) Development()    {}
func (AttrRefBaseType) Recommended()    {}
func (AttrRefBaseType) Key() string     { return "vcs_ref_base_type" }
func (a AttrRefBaseType) Value() string { return string(a) }

const RefBaseTypeBranch AttrRefBaseType = "branch"
const RefBaseTypeTag AttrRefBaseType = "tag"

// The name of the [reference] such as **branch** or **tag** in the repository.
//
// `head` refers to where you are right now; the current reference at a
// given time
//
// [reference]: https://git-scm.com/docs/gitglossary#def_ref
type AttrRefHeadName string // vcs.ref.head.name

func (AttrRefHeadName) Development()    {}
func (AttrRefHeadName) Recommended()    {}
func (AttrRefHeadName) Key() string     { return "vcs_ref_head_name" }
func (a AttrRefHeadName) Value() string { return string(a) }

// The revision, literally [revised version], The revision most often refers to a commit object in Git, or a revision number in SVN.
//
// `head` refers to where you are right now; the current reference at a
// given time.The revision can be a full [hash value (see
// glossary)],
// of the recorded change to a ref within a repository pointing to a
// commit [commit] object. It does
// not necessarily have to be a hash; it can simply define a [revision
// number]
// which is an integer that is monotonically increasing. In cases where
// it is identical to the `ref.head.name`, it SHOULD still be included.
// It is up to the implementer to decide which value to set as the
// revision based on the VCS system and situational context
//
// [revised version]: https://www.merriam-webster.com/dictionary/revision
// [hash value (see
// glossary)]: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf
// [commit]: https://git-scm.com/docs/git-commit
// [revision
// number]: https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html
type AttrRefHeadRevision string // vcs.ref.head.revision

func (AttrRefHeadRevision) Development()    {}
func (AttrRefHeadRevision) Recommended()    {}
func (AttrRefHeadRevision) Key() string     { return "vcs_ref_head_revision" }
func (a AttrRefHeadRevision) Value() string { return string(a) }

// The type of the [reference] in the repository.
//
// `head` refers to where you are right now; the current reference at a
// given time
//
// [reference]: https://git-scm.com/docs/gitglossary#def_ref
type AttrRefHeadType string // vcs.ref.head.type

func (AttrRefHeadType) Development()    {}
func (AttrRefHeadType) Recommended()    {}
func (AttrRefHeadType) Key() string     { return "vcs_ref_head_type" }
func (a AttrRefHeadType) Value() string { return string(a) }

const RefHeadTypeBranch AttrRefHeadType = "branch"
const RefHeadTypeTag AttrRefHeadType = "tag"

// The type of the [reference] in the repository
//
// [reference]: https://git-scm.com/docs/gitglossary#def_ref
type AttrRefType string // vcs.ref.type

func (AttrRefType) Development()    {}
func (AttrRefType) Recommended()    {}
func (AttrRefType) Key() string     { return "vcs_ref_type" }
func (a AttrRefType) Value() string { return string(a) }

const RefTypeBranch AttrRefType = "branch"
const RefTypeTag AttrRefType = "tag"

// Deprecated, use `vcs.change.id` instead
type AttrRepositoryChangeId string // vcs.repository.change.id

func (AttrRepositoryChangeId) Development()    {}
func (AttrRepositoryChangeId) Recommended()    {}
func (AttrRepositoryChangeId) Key() string     { return "vcs_repository_change_id" }
func (a AttrRepositoryChangeId) Value() string { return string(a) }

// Deprecated, use `vcs.change.title` instead
type AttrRepositoryChangeTitle string // vcs.repository.change.title

func (AttrRepositoryChangeTitle) Development()    {}
func (AttrRepositoryChangeTitle) Recommended()    {}
func (AttrRepositoryChangeTitle) Key() string     { return "vcs_repository_change_title" }
func (a AttrRepositoryChangeTitle) Value() string { return string(a) }

// The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
//
// Due to it only being the name, it can clash with forks of the same
// repository if collecting telemetry across multiple orgs or groups in
// the same backends
type AttrRepositoryName string // vcs.repository.name

func (AttrRepositoryName) Development()    {}
func (AttrRepositoryName) Recommended()    {}
func (AttrRepositoryName) Key() string     { return "vcs_repository_name" }
func (a AttrRepositoryName) Value() string { return string(a) }

// Deprecated, use `vcs.ref.head.name` instead
type AttrRepositoryRefName string // vcs.repository.ref.name

func (AttrRepositoryRefName) Development()    {}
func (AttrRepositoryRefName) Recommended()    {}
func (AttrRepositoryRefName) Key() string     { return "vcs_repository_ref_name" }
func (a AttrRepositoryRefName) Value() string { return string(a) }

// Deprecated, use `vcs.ref.head.revision` instead
type AttrRepositoryRefRevision string // vcs.repository.ref.revision

func (AttrRepositoryRefRevision) Development()    {}
func (AttrRepositoryRefRevision) Recommended()    {}
func (AttrRepositoryRefRevision) Key() string     { return "vcs_repository_ref_revision" }
func (a AttrRepositoryRefRevision) Value() string { return string(a) }

// Deprecated, use `vcs.ref.head.type` instead
type AttrRepositoryRefType string // vcs.repository.ref.type

func (AttrRepositoryRefType) Development()    {}
func (AttrRepositoryRefType) Recommended()    {}
func (AttrRepositoryRefType) Key() string     { return "vcs_repository_ref_type" }
func (a AttrRepositoryRefType) Value() string { return string(a) }

const RepositoryRefTypeBranch AttrRepositoryRefType = "branch"
const RepositoryRefTypeTag AttrRepositoryRefType = "tag"

// The [canonical URL] of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
//
// In Git Version Control Systems, the canonical URL SHOULD NOT include
// the `.git` extension
//
// [canonical URL]: https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.
type AttrRepositoryUrlFull string // vcs.repository.url.full

func (AttrRepositoryUrlFull) Development()    {}
func (AttrRepositoryUrlFull) Recommended()    {}
func (AttrRepositoryUrlFull) Key() string     { return "vcs_repository_url_full" }
func (a AttrRepositoryUrlFull) Value() string { return string(a) }

// The type of revision comparison
type AttrRevisionDeltaDirection string // vcs.revision_delta.direction

func (AttrRevisionDeltaDirection) Development()    {}
func (AttrRevisionDeltaDirection) Recommended()    {}
func (AttrRevisionDeltaDirection) Key() string     { return "vcs_revision_delta_direction" }
func (a AttrRevisionDeltaDirection) Value() string { return string(a) }

const RevisionDeltaDirectionBehind AttrRevisionDeltaDirection = "behind"
const RevisionDeltaDirectionAhead AttrRevisionDeltaDirection = "ahead"

/* State {
    name: "attr.go.j2",
    current_block: None,
    auto_escape: None,
    ctx: {
        "ctx": {
            "attributes": [
                {
                    "brief": "The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.\n",
                    "examples": [
                        "123",
                    ],
                    "name": "vcs.change.id",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The state of the change (pull request/merge request/changelist).\n",
                    "examples": [
                        "open",
                        "closed",
                        "merged",
                    ],
                    "name": "vcs.change.state",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.",
                                "deprecated": none,
                                "id": "open",
                                "note": none,
                                "stability": "development",
                                "value": "open",
                            },
                            {
                                "brief": "WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.",
                                "deprecated": none,
                                "id": "wip",
                                "note": none,
                                "stability": "development",
                                "value": "wip",
                            },
                            {
                                "brief": "Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.",
                                "deprecated": none,
                                "id": "closed",
                                "note": none,
                                "stability": "development",
                                "value": "closed",
                            },
                            {
                                "brief": "Merged indicates that the change has been successfully integrated into the target codebase.",
                                "deprecated": none,
                                "id": "merged",
                                "note": none,
                                "stability": "development",
                                "value": "merged",
                            },
                        ],
                    },
                },
                {
                    "brief": "The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.\n",
                    "examples": [
                        "Fixes broken thing",
                        "feat: add my new feature",
                        "[chore] update dependency",
                    ],
                    "name": "vcs.change.title",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The type of line change being measured on a branch or change.\n",
                    "examples": [
                        "added",
                        "removed",
                    ],
                    "name": "vcs.line_change.type",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "How many lines were added.",
                                "deprecated": none,
                                "id": "added",
                                "note": none,
                                "stability": "development",
                                "value": "added",
                            },
                            {
                                "brief": "How many lines were removed.",
                                "deprecated": none,
                                "id": "removed",
                                "note": none,
                                "stability": "development",
                                "value": "removed",
                            },
                        ],
                    },
                },
                {
                    "brief": "The group owner within the version control system.\n",
                    "examples": [
                        "my-org",
                        "myteam",
                        "business-unit",
                    ],
                    "name": "vcs.owner.name",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The name of the version control system provider.\n",
                    "examples": [
                        "github",
                        "gitlab",
                        "gitea",
                        "bitbucket",
                    ],
                    "name": "vcs.provider.name",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "[GitHub](https://github.com)",
                                "deprecated": none,
                                "id": "github",
                                "note": none,
                                "stability": "development",
                                "value": "github",
                            },
                            {
                                "brief": "[GitLab](https://gitlab.com)",
                                "deprecated": none,
                                "id": "gitlab",
                                "note": none,
                                "stability": "development",
                                "value": "gitlab",
                            },
                            {
                                "brief": "Deprecated, use `gitea` instead.",
                                "deprecated": "Replaced by `gitea`.",
                                "id": "gittea",
                                "note": none,
                                "stability": "development",
                                "value": "gittea",
                            },
                            {
                                "brief": "[Gitea](https://gitea.io)",
                                "deprecated": none,
                                "id": "gitea",
                                "note": none,
                                "stability": "development",
                                "value": "gitea",
                            },
                            {
                                "brief": "[Bitbucket](https://bitbucket.org)",
                                "deprecated": none,
                                "id": "bitbucket",
                                "note": none,
                                "stability": "development",
                                "value": "bitbucket",
                            },
                        ],
                    },
                },
                {
                    "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
                    "examples": [
                        "my-feature-branch",
                        "tag-1-test",
                    ],
                    "name": "vcs.ref.base.name",
                    "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
                    "examples": [
                        "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
                        "main",
                        "123",
                        "HEAD",
                    ],
                    "name": "vcs.ref.base.revision",
                    "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits. The\nrevision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.base.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
                    "examples": [
                        "branch",
                        "tag",
                    ],
                    "name": "vcs.ref.base.type",
                    "note": "`base` refers to the starting point of a change. For example, `main`\nwould be the base reference of type branch if you've created a new\nreference of type branch from it and created new commits.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                                "deprecated": none,
                                "id": "branch",
                                "note": none,
                                "stability": "development",
                                "value": "branch",
                            },
                            {
                                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                                "deprecated": none,
                                "id": "tag",
                                "note": none,
                                "stability": "development",
                                "value": "tag",
                            },
                        ],
                    },
                },
                {
                    "brief": "The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.\n",
                    "examples": [
                        "my-feature-branch",
                        "tag-1-test",
                    ],
                    "name": "vcs.ref.head.name",
                    "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.\n",
                    "examples": [
                        "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
                        "main",
                        "123",
                        "HEAD",
                    ],
                    "name": "vcs.ref.head.revision",
                    "note": "`head` refers to where you are right now; the current reference at a\ngiven time.The revision can be a full [hash value (see\nglossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),\nof the recorded change to a ref within a repository pointing to a\ncommit [commit](https://git-scm.com/docs/git-commit) object. It does\nnot necessarily have to be a hash; it can simply define a [revision\nnumber](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)\nwhich is an integer that is monotonically increasing. In cases where\nit is identical to the `ref.head.name`, it SHOULD still be included.\nIt is up to the implementer to decide which value to set as the\nrevision based on the VCS system and situational context.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
                    "examples": [
                        "branch",
                        "tag",
                    ],
                    "name": "vcs.ref.head.type",
                    "note": "`head` refers to where you are right now; the current reference at a\ngiven time.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                                "deprecated": none,
                                "id": "branch",
                                "note": none,
                                "stability": "development",
                                "value": "branch",
                            },
                            {
                                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                                "deprecated": none,
                                "id": "tag",
                                "note": none,
                                "stability": "development",
                                "value": "tag",
                            },
                        ],
                    },
                },
                {
                    "brief": "The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.\n",
                    "examples": [
                        "branch",
                        "tag",
                    ],
                    "name": "vcs.ref.type",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                                "deprecated": none,
                                "id": "branch",
                                "note": none,
                                "stability": "development",
                                "value": "branch",
                            },
                            {
                                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                                "deprecated": none,
                                "id": "tag",
                                "note": none,
                                "stability": "development",
                                "value": "tag",
                            },
                        ],
                    },
                },
                {
                    "brief": "Deprecated, use `vcs.change.id` instead.\n",
                    "deprecated": {
                        "note": "Replaced by `vcs.change.id`.",
                        "reason": "renamed",
                        "renamed_to": "vcs.change.id",
                    },
                    "examples": [
                        "123",
                    ],
                    "name": "vcs.repository.change.id",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Deprecated, use `vcs.change.title` instead.\n",
                    "deprecated": {
                        "note": "Replaced by `vcs.change.title`.",
                        "reason": "renamed",
                        "renamed_to": "vcs.change.title",
                    },
                    "examples": [
                        "Fixes broken thing",
                        "feat: add my new feature",
                        "[chore] update dependency",
                    ],
                    "name": "vcs.repository.change.title",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.\n",
                    "examples": [
                        "semantic-conventions",
                        "my-cool-repo",
                    ],
                    "name": "vcs.repository.name",
                    "note": "Due to it only being the name, it can clash with forks of the same\nrepository if collecting telemetry across multiple orgs or groups in\nthe same backends.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Deprecated, use `vcs.ref.head.name` instead.\n",
                    "deprecated": {
                        "note": "Replaced by `vcs.ref.head.name`.",
                        "reason": "renamed",
                        "renamed_to": "vcs.ref.head.name",
                    },
                    "examples": [
                        "my-feature-branch",
                        "tag-1-test",
                    ],
                    "name": "vcs.repository.ref.name",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Deprecated, use `vcs.ref.head.revision` instead.\n",
                    "deprecated": {
                        "note": "Replaced by `vcs.ref.head.revision`.",
                        "reason": "renamed",
                        "renamed_to": "vcs.ref.head.revision",
                    },
                    "examples": [
                        "9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc",
                        "main",
                        "123",
                        "HEAD",
                    ],
                    "name": "vcs.repository.ref.revision",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Deprecated, use `vcs.ref.head.type` instead.\n",
                    "deprecated": {
                        "note": "Replaced by `vcs.ref.head.type`.",
                        "reason": "renamed",
                        "renamed_to": "vcs.ref.head.type",
                    },
                    "examples": [
                        "branch",
                        "tag",
                    ],
                    "name": "vcs.repository.ref.type",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)",
                                "deprecated": none,
                                "id": "branch",
                                "note": none,
                                "stability": "development",
                                "value": "branch",
                            },
                            {
                                "brief": "[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)",
                                "deprecated": none,
                                "id": "tag",
                                "note": none,
                                "stability": "development",
                                "value": "tag",
                            },
                        ],
                    },
                },
                {
                    "brief": "The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.\n",
                    "examples": [
                        "https://github.com/opentelemetry/open-telemetry-collector-contrib",
                        "https://gitlab.com/my-org/my-project/my-projects-project/repo",
                    ],
                    "name": "vcs.repository.url.full",
                    "note": "In Git Version Control Systems, the canonical URL SHOULD NOT include\nthe `.git` extension.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The type of revision comparison.\n",
                    "examples": [
                        "ahead",
                        "behind",
                    ],
                    "name": "vcs.revision_delta.direction",
                    "requirement_level": "recommended",
                    "root_namespace": "vcs",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "How many revisions the change is behind the target ref.",
                                "deprecated": none,
                                "id": "behind",
                                "note": none,
                                "stability": "development",
                                "value": "behind",
                            },
                            {
                                "brief": "How many revisions the change is ahead of the target ref.",
                                "deprecated": none,
                                "id": "ahead",
                                "note": none,
                                "stability": "development",
                                "value": "ahead",
                            },
                        ],
                    },
                },
            ],
            "root_namespace": "vcs",
        },
    },
    env: Environment {
        globals: {
            "concat_if": weaver_forge::extensions::util::concat_if,
            "cycler": minijinja_contrib::globals::cycler,
            "debug": minijinja::functions::builtins::debug,
            "dict": minijinja::functions::builtins::dict,
            "joiner": minijinja_contrib::globals::joiner,
            "namespace": minijinja::functions::builtins::namespace,
            "params": {
                "params": {},
            },
            "range": minijinja::functions::builtins::range,
            "template": {},
        },
        tests: [
            "!=",
            "<",
            "<=",
            "==",
            ">",
            ">=",
            "array",
            "boolean",
            "defined",
            "deprecated",
            "divisibleby",
            "endingwith",
            "enum",
            "enum_type",
            "eq",
            "equalto",
            "escaped",
            "even",
            "experimental",
            "false",
            "filter",
            "float",
            "ge",
            "greaterthan",
            "gt",
            "in",
            "int",
            "integer",
            "iterable",
            "le",
            "lessthan",
            "lower",
            "lt",
            "mapping",
            "ne",
            "none",
            "number",
            "odd",
            "safe",
            "sameas",
            "sequence",
            "simple_type",
            "stable",
            "startingwith",
            "string",
            "template_type",
            "test",
            "true",
            "undefined",
            "upper",
        ],
        filters: [
            "abs",
            "acronym",
            "ansi_bg_black",
            "ansi_bg_blue",
            "ansi_bg_bright_black",
            "ansi_bg_bright_blue",
            "ansi_bg_bright_cyan",
            "ansi_bg_bright_green",
            "ansi_bg_bright_magenta",
            "ansi_bg_bright_red",
            "ansi_bg_bright_white",
            "ansi_bg_bright_yellow",
            "ansi_bg_cyan",
            "ansi_bg_green",
            "ansi_bg_magenta",
            "ansi_bg_red",
            "ansi_bg_white",
            "ansi_bg_yellow",
            "ansi_black",
            "ansi_blue",
            "ansi_bold",
            "ansi_bright_black",
            "ansi_bright_blue",
            "ansi_bright_cyan",
            "ansi_bright_green",
            "ansi_bright_magenta",
            "ansi_bright_red",
            "ansi_bright_white",
            "ansi_bright_yellow",
            "ansi_cyan",
            "ansi_green",
            "ansi_italic",
            "ansi_magenta",
            "ansi_red",
            "ansi_strikethrough",
            "ansi_underline",
            "ansi_white",
            "ansi_yellow",
            "attr",
            "attribute_id",
            "attribute_namespace",
            "attribute_registry_file",
            "attribute_registry_namespace",
            "attribute_registry_title",
            "attribute_sort",
            "batch",
            "body_fields",
            "bool",
            "camel_case",
            "camel_case_const",
            "capitalize",
            "capitalize_first",
            "comment",
            "comment_with_prefix",
            "count",
            "d",
            "default",
            "dictsort",
            "e",
            "enum_type",
            "escape",
            "filesizeformat",
            "first",
            "flatten",
            "float",
            "groupby",
            "indent",
            "instantiated_type",
            "int",
            "items",
            "join",
            "kebab_case",
            "kebab_case_const",
            "last",
            "length",
            "lines",
            "list",
            "lower",
            "lower_case",
            "map",
            "map_text",
            "markdown_to_html",
            "max",
            "metric_namespace",
            "min",
            "not_required",
            "pascal_case",
            "pascal_case_const",
            "pluralize",
            "pprint",
            "print_member_value",
            "regex_replace",
            "reject",
            "rejectattr",
            "replace",
            "required",
            "reverse",
            "round",
            "safe",
            "screaming_kebab_case",
            "screaming_snake_case",
            "screaming_snake_case_const",
            "select",
            "selectattr",
            "slice",
            "snake_case",
            "snake_case_const",
            "sort",
            "split",
            "split_id",
            "string",
            "striptags",
            "sum",
            "title",
            "title_case",
            "tojson",
            "toyaml",
            "trim",
            "truncate",
            "type_mapping",
            "unique",
            "upper",
            "upper_case",
            "urlencode",
        ],
        templates: [
            "attr.go.j2",
        ],
    },
} */
