package user_agent

// Name of the user-agent extracted from original. Usually refers to the browser's name.
//
// [Example] of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`
//
// [Example]: https://www.whatsmyua.info
type AttrName string // user_agent.name

func (AttrName) Development()    {}
func (AttrName) Recommended()    {}
func (AttrName) Key() string     { return "user_agent_name" }
func (a AttrName) Value() string { return string(a) }

// Value of the [HTTP User-Agent] header sent by the client
//
// [HTTP User-Agent]: https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent
type AttrOriginal string // user_agent.original

func (AttrOriginal) Stable()         {}
func (AttrOriginal) Recommended()    {}
func (AttrOriginal) Key() string     { return "user_agent_original" }
func (a AttrOriginal) Value() string { return string(a) }

// Human readable operating system name.
// For mapping user agent strings to OS names, libraries such as [ua-parser] can be utilized
//
// [ua-parser]: https://github.com/ua-parser
type AttrOsName string // user_agent.os.name

func (AttrOsName) Development()    {}
func (AttrOsName) Recommended()    {}
func (AttrOsName) Key() string     { return "user_agent_os_name" }
func (a AttrOsName) Value() string { return string(a) }

// The version string of the operating system as defined in [Version Attributes].
//
// For mapping user agent strings to OS versions, libraries such as [ua-parser] can be utilized
//
// [Version Attributes]: /docs/resource/README.md#version-attributes
// [ua-parser]: https://github.com/ua-parser
type AttrOsVersion string // user_agent.os.version

func (AttrOsVersion) Development()    {}
func (AttrOsVersion) Recommended()    {}
func (AttrOsVersion) Key() string     { return "user_agent_os_version" }
func (a AttrOsVersion) Value() string { return string(a) }

// Specifies the category of synthetic traffic, such as tests or bots.
//
// This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests
type AttrSyntheticType string // user_agent.synthetic.type

func (AttrSyntheticType) Development()    {}
func (AttrSyntheticType) Recommended()    {}
func (AttrSyntheticType) Key() string     { return "user_agent_synthetic_type" }
func (a AttrSyntheticType) Value() string { return string(a) }

const SyntheticTypeBot AttrSyntheticType = "bot"
const SyntheticTypeTest AttrSyntheticType = "test"

// Version of the user-agent extracted from original. Usually refers to the browser's version
//
// [Example] of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`
//
// [Example]: https://www.whatsmyua.info
type AttrVersion string // user_agent.version

func (AttrVersion) Development()    {}
func (AttrVersion) Recommended()    {}
func (AttrVersion) Key() string     { return "user_agent_version" }
func (a AttrVersion) Value() string { return string(a) }

/* State {
    name: "attr.go.j2",
    current_block: None,
    auto_escape: None,
    ctx: {
        "ctx": {
            "attributes": [
                {
                    "brief": "Name of the user-agent extracted from original. Usually refers to the browser's name.\n",
                    "examples": [
                        "Safari",
                        "YourApp",
                    ],
                    "name": "user_agent.name",
                    "note": "[Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`\n",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
                    "examples": [
                        "CERN-LineMode/2.15 libwww/2.17b3",
                        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
                        "YourApp/1.0.0 grpc-java-okhttp/1.27.2",
                    ],
                    "name": "user_agent.original",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "stable",
                    "type": "string",
                },
                {
                    "brief": "Human readable operating system name.",
                    "examples": [
                        "iOS",
                        "Android",
                        "Ubuntu",
                    ],
                    "name": "user_agent.os.name",
                    "note": "For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
                    "examples": [
                        "14.2.1",
                        "18.04.1",
                    ],
                    "name": "user_agent.os.version",
                    "note": "For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "development",
                    "type": "string",
                },
                {
                    "brief": "Specifies the category of synthetic traffic, such as tests or bots.\n",
                    "name": "user_agent.synthetic.type",
                    "note": "This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "development",
                    "type": {
                        "members": [
                            {
                                "brief": "Bot source.",
                                "deprecated": none,
                                "id": "bot",
                                "note": none,
                                "stability": "development",
                                "value": "bot",
                            },
                            {
                                "brief": "Synthetic test source.",
                                "deprecated": none,
                                "id": "test",
                                "note": none,
                                "stability": "development",
                                "value": "test",
                            },
                        ],
                    },
                },
                {
                    "brief": "Version of the user-agent extracted from original. Usually refers to the browser's version\n",
                    "examples": [
                        "14.1.2",
                        "1.0.0",
                    ],
                    "name": "user_agent.version",
                    "note": "[Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`\n",
                    "requirement_level": "recommended",
                    "root_namespace": "user_agent",
                    "stability": "development",
                    "type": "string",
                },
            ],
            "root_namespace": "user_agent",
        },
    },
    env: Environment {
        globals: {
            "concat_if": weaver_forge::extensions::util::concat_if,
            "cycler": minijinja_contrib::globals::cycler,
            "debug": minijinja::functions::builtins::debug,
            "dict": minijinja::functions::builtins::dict,
            "joiner": minijinja_contrib::globals::joiner,
            "namespace": minijinja::functions::builtins::namespace,
            "params": {
                "params": {},
            },
            "range": minijinja::functions::builtins::range,
            "template": {},
        },
        tests: [
            "!=",
            "<",
            "<=",
            "==",
            ">",
            ">=",
            "array",
            "boolean",
            "defined",
            "deprecated",
            "divisibleby",
            "endingwith",
            "enum",
            "enum_type",
            "eq",
            "equalto",
            "escaped",
            "even",
            "experimental",
            "false",
            "filter",
            "float",
            "ge",
            "greaterthan",
            "gt",
            "in",
            "int",
            "integer",
            "iterable",
            "le",
            "lessthan",
            "lower",
            "lt",
            "mapping",
            "ne",
            "none",
            "number",
            "odd",
            "safe",
            "sameas",
            "sequence",
            "simple_type",
            "stable",
            "startingwith",
            "string",
            "template_type",
            "test",
            "true",
            "undefined",
            "upper",
        ],
        filters: [
            "abs",
            "acronym",
            "ansi_bg_black",
            "ansi_bg_blue",
            "ansi_bg_bright_black",
            "ansi_bg_bright_blue",
            "ansi_bg_bright_cyan",
            "ansi_bg_bright_green",
            "ansi_bg_bright_magenta",
            "ansi_bg_bright_red",
            "ansi_bg_bright_white",
            "ansi_bg_bright_yellow",
            "ansi_bg_cyan",
            "ansi_bg_green",
            "ansi_bg_magenta",
            "ansi_bg_red",
            "ansi_bg_white",
            "ansi_bg_yellow",
            "ansi_black",
            "ansi_blue",
            "ansi_bold",
            "ansi_bright_black",
            "ansi_bright_blue",
            "ansi_bright_cyan",
            "ansi_bright_green",
            "ansi_bright_magenta",
            "ansi_bright_red",
            "ansi_bright_white",
            "ansi_bright_yellow",
            "ansi_cyan",
            "ansi_green",
            "ansi_italic",
            "ansi_magenta",
            "ansi_red",
            "ansi_strikethrough",
            "ansi_underline",
            "ansi_white",
            "ansi_yellow",
            "attr",
            "attribute_id",
            "attribute_namespace",
            "attribute_registry_file",
            "attribute_registry_namespace",
            "attribute_registry_title",
            "attribute_sort",
            "batch",
            "body_fields",
            "bool",
            "camel_case",
            "camel_case_const",
            "capitalize",
            "capitalize_first",
            "comment",
            "comment_with_prefix",
            "count",
            "d",
            "default",
            "dictsort",
            "e",
            "enum_type",
            "escape",
            "filesizeformat",
            "first",
            "flatten",
            "float",
            "groupby",
            "indent",
            "instantiated_type",
            "int",
            "items",
            "join",
            "kebab_case",
            "kebab_case_const",
            "last",
            "length",
            "lines",
            "list",
            "lower",
            "lower_case",
            "map",
            "map_text",
            "markdown_to_html",
            "max",
            "metric_namespace",
            "min",
            "not_required",
            "pascal_case",
            "pascal_case_const",
            "pluralize",
            "pprint",
            "print_member_value",
            "regex_replace",
            "reject",
            "rejectattr",
            "replace",
            "required",
            "reverse",
            "round",
            "safe",
            "screaming_kebab_case",
            "screaming_snake_case",
            "screaming_snake_case_const",
            "select",
            "selectattr",
            "slice",
            "snake_case",
            "snake_case_const",
            "sort",
            "split",
            "split_id",
            "string",
            "striptags",
            "sum",
            "title",
            "title_case",
            "tojson",
            "toyaml",
            "trim",
            "truncate",
            "type_mapping",
            "unique",
            "upper",
            "upper_case",
            "urlencode",
        ],
        templates: [
            "attr.go.j2",
        ],
    },
} */
